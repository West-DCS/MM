-- Simple Class to add command line functions to MSF, might do more later with this.
COMMAND = {}

function COMMAND:New(CommandName, CommandDesc, Options)
    self.CommandName = CommandName
    self.CommandDesc = CommandDesc
    self.Options = Options or nil

    local Valid = self:_Switch()

    if not Valid then return end

    return ROUTINES.util.deepCopy(self)
end

-- Function must be overridden.
function COMMAND:Execute()

end

-- You may override this function, but this provides an autogenerated output.
function COMMAND:Help()
    if not self.Options then self:Out('Usage: %s\t%s', self.CommandName, self.CommandDesc) return end

    self:Out('Usage: %s [options...] %s', self.CommandName, self.CommandDesc)

    for Option, Value in pairs(self.Options) do
        if Value.param then
            self:Out('\t-%s <%s>\t%s', Option, Value.param, Value.desc)
        else
            self:Out('\t-%s\t%s', Option, Value.desc)
        end
    end
end

function COMMAND:_ParseArg(ArgIndex, Option)
    -- The command has options, possibly with a parameter.
    if ROUTINES.string.firstChar(Option) == '-'then
        -- Test if valid option passed.
        if not self.Options[string.sub(Option, 2, 2)] then self:Help() return end
        -- Check if there is a parameter with the option. Pass parameter to function.
        if ArgIndex + 1 <= #arg and ROUTINES.string.firstChar(arg[ArgIndex + 1]) ~= '-' then
            local Param = arg[ArgIndex + 1]

            self.Options[string.sub(Option, 2, 2)].fun(self, Param)
            -- No parameter, execution function without param.
        else
            self.Options[string.sub(Option, 2, 2)].fun(self)
        end
    end
end

function COMMAND:_Switch()
    if not arg then return true end
    if not self.Options then return true end

    for i, Option in ipairs(arg) do
        -- First Arg is command to run, this is already known. Each arg after first, is the options, followed by
        -- optional parameters.

        self:_ParseArg(i, Option)
    end

    return true
end

-- Function to output text to command-line. Pass a table to ignore formatting for raw strings.
function COMMAND:Out(String, ...)
    local Out

    if type(String) == 'table' then
        Out = String[1]
    else
        Out = string.format(String, ...)
    end

    print(Out)
end
