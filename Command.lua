-- Simple Class to add command line functions to MSF, might do more later with this.
COMMAND = {}

function COMMAND:New(CommandName, CommandDesc, Options)
    self.CommandName = CommandName
    self.CommandDesc = CommandDesc
    self.Options = Options or nil

    local Valid = self:_Switch()

    if not Valid then return end

    return ROUTINES.util.deepCopy(self)
end

-- Function must be overridden.
function COMMAND:Execute()

end

-- You may override this function, but this provides an autogenerated output.
function COMMAND:Help()
    self:Out('Usage: %s [options...] %s', self.CommandName, self.CommandDesc)

    for Option, Value in pairs(self.Options) do
        if Value.param then
            self:Out('\t-%s <%s>\t%s', Option, Value.param, Value.desc)
        else
            self:Out('\t-%s\t%s', Option, Value.desc)
        end
    end
end

function COMMAND:_Switch()
    if not arg then return end
    if not self.Options then return end

    for i, Option in ipairs(arg) do
        -- First Arg is command to run, this is already known. Each arg after first, is the options, followed by
        -- optional parameters.
        if i > 1 then
            -- Test here if the option is -h or -help to break out of loop and output usage function.
            if i == 2 then
                local String = string.lower(arg[2])

                if String == '-h' or String == '-help' or String == 'help' then
                    self:Help()

                    return false
                end
            end
            -- The command has options, possibly with a parameter.
            if string.sub(Option, 1, 1) == '-'then
                -- Check if there is a parameter with the option. Pass parameter to function.
                if i + 1 <= #arg then
                    local Param = arg[i + 1]

                    self.Options[string.sub(Option, 2, 2)].fun(self, Param)
                -- No parameter, execution function without param.
                else
                    self.Options[string.sub(Option, 2, 2)].fun(self)
                end
            -- The command does not have options, just parameters. Index the options table by numerical index instead.
            --else
            --    self.Options[i - 1]()
            end
        end
    end

    return true
end

function COMMAND:Out(String, ...)
    local Out = string.format(String, ...)

    print(Out)
end
